{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nexport const useCounter = type => {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n\n  if (type === \"+\") {\n    interval = positiveInterval;\n  } else if (type === \"-\") {\n    interval = negativeInterval;\n  }\n\n  useEffect(() => {\n    interval;\n    return () => clearInterval(interval);\n  }, [counter, type]);\n\n  const counterType = type => {};\n\n  const positiveInterval = () => {\n    setInterval(() => {\n      setCounter(prevState => prevState + 1);\n    }, 1000);\n  };\n\n  const negativeInterval = () => {\n    setInterval(() => {\n      setCounter(prevState => prevState - 1);\n    }, 1000);\n  };\n\n  return [counter];\n};\n\n_s(useCounter, \"uPkTgB8PBsujXy6a5mXWSxFNaD8=\");","map":{"version":3,"sources":["/home/troias/udemy/project-5/01-starting-project/src/customHooks/useCounter.js"],"names":["React","useState","useEffect","useCounter","type","counter","setCounter","interval","positiveInterval","negativeInterval","clearInterval","counterType","setInterval","prevState"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AAEhC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,CAAD,CAAtC;;AAGA,MAAIG,IAAI,KAAK,GAAb,EAAkB;AACdG,IAAAA,QAAQ,GAAGC,gBAAX;AACH,GAFD,MAEO,IAAIJ,IAAI,KAAK,GAAb,EAAkB;AACrBG,IAAAA,QAAQ,GAAGE,gBAAX;AACH;;AAEDP,EAAAA,SAAS,CAAC,MAAK;AACXK,IAAAA,QAAQ;AACR,WAAO,MAAMG,aAAa,CAACH,QAAD,CAA1B;AACH,GAHQ,EAGN,CAACF,OAAD,EAASD,IAAT,CAHM,CAAT;;AAOA,QAAMO,WAAW,GAAIP,IAAD,IAAU,CAE7B,CAFD;;AAIA,QAAMI,gBAAgB,GAAG,MAAM;AAC3BI,IAAAA,WAAW,CAAC,MAAM;AACdN,MAAAA,UAAU,CAAEO,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAV;AACH,KAFU,EAER,IAFQ,CAAX;AAIH,GALD;;AAOA,QAAMJ,gBAAgB,GAAG,MAAM;AAC3BG,IAAAA,WAAW,CAAC,MAAM;AACdN,MAAAA,UAAU,CAAEO,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAV;AACH,KAFU,EAER,IAFQ,CAAX;AAIH,GALD;;AAQA,SAAO,CAACR,OAAD,CAAP;AACH,CAtCM;;GAAMF,U","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nexport const useCounter = (type) => {\r\n\r\n    const [counter, setCounter] = useState(0);\r\n\r\n\r\n    if (type === \"+\") {\r\n        interval = positiveInterval\r\n    } else if (type === \"-\") {\r\n        interval = negativeInterval\r\n    }\r\n\r\n    useEffect(() =>{\r\n        interval\r\n        return () => clearInterval(interval)\r\n    }, [counter,type ])\r\n  \r\n\r\n\r\n    const counterType = (type) => {\r\n      \r\n    }\r\n\r\n    const positiveInterval = () => {\r\n        setInterval(() => {\r\n            setCounter((prevState) => prevState + 1);\r\n        }, 1000) \r\n    \r\n    }\r\n\r\n    const negativeInterval = () => {\r\n        setInterval(() => {\r\n            setCounter((prevState) => prevState - 1);\r\n        }, 1000) \r\n    \r\n    }\r\n\r\n\r\n    return [counter]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}